# ------------------------------------------------------------------------------
#                 LOAD PACKAGES AND USER DEFINED FUNCTIONS
# ------------------------------------------------------------------------------
# install and load local libraries 
# TODO: ADD THIS TO A PREAMBLE FILE WITH LIST OF PACKAGES, CHECK INSTALL + CALL
local_libs <- list.files("lib", full.names = T)
lapply(local_libs[1], install.packages, repos=NULL, type="source")
# general
library(tidyverse)
library(xts)
library(zoo)
library(lubridate)
# plotting
library(ggalt)
library(extrafont)
library(plotly)
# covariance specific 
library(cccp)
library(huge)           # glasso, RIC
library(cvCovEst)
library(rrcov)          # CovMcd and CovMve
library(tawny)
library(tawny.types)
library(covmat)
library(corpcor)
library(CovTools)       # Oracle
library(covFactorModel) # factor models
# finance specific
library(tidyquant)
library(quantmod)
# math/ stats tools
library(quadprog)
library(MASS)
library(StatPerMeCo)
# remotes::install_github("MatthewBJane/theme_park")
library(ThemePark)
library(ggrepel)

# load own functions
# load Ledoit-Wolf functions

lapply(
  c(
    list.files("functions", full.names = TRUE),
    list.files("covShrinkage-main", pattern = ".R", full.names = T)
  ),
  source
) %>% invisible

# define paths 
data_path <- "/Users/pro/Desktop/masters_thesis/data"
from_date <- as.Date("1982-01-01")
to_date <- as.Date("2022-02-01")

# ------------------------------------------------------------------------------
#                 LOAD DATA
# ------------------------------------------------------------------------------
# get data (02-1982 to 02-2022, 40 years, 567 stocks, cleaned)
get(load(file.path(data_path,"stock_log_returns_monthly_567.rda"))) %>% 
  invisible
# daily data from 1997 to 2022
get(load(file.path(data_path,"old data/stock_log_returns_daily_1000.rda"))) %>% 
  invisible
# monthly data
log_returns <- stock_log_returns_monthly_567[,1:151] %>% 
  filter(date > from_date & date < to_date)
# daily data
daily_log_returns <- stock_log_returns_daily_1000 %>% 
  dplyr::select(date, everything())

# get 10-year Treasury notes and S&P500 data monthly and daily
tickers <- c("^TNX","^GSPC")
getSymbols(
  tickers, 
  from = from_date, 
  to = to_date, 
  periodicity = "daily"
)
gspc_monthly <- GSPC$GSPC.Adjusted %>% 
  apply.monthly(mean) %>% 
  fortify.zoo %>% 
  mutate(returns = GSPC.Adjusted/lag(GSPC.Adjusted)-1) 

# Load historical factor data (market, SMB, HML)
# downloaded directly from 
# https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html
# Fama/French 3 Factors, CSV
factors <- rio::import(
  file.path(data_path, "F-F_Research_Data_Factors.CSV")
) %>% 
  mutate(V1 = as.Date(
    V1 %>% paste0("01"), 
    format = "%Y%m%d"
  )
  ) %>% 
  dplyr::filter(V1 > from_date & V1 < to_date) %>% 
  dplyr::select(-RF) %>% 
  rename(date = V1)

# ------------------------------------------------------------------------------
#                 DEFINE PARAMETERS, SETTINGS
# ------------------------------------------------------------------------------
training_period <- 15*12    # months
rolling_period <- 6         # months
n <- dim(log_returns)[2]
k <- dim(log_returns)[1]

# rules: 
# gis, lis, qis: n_obs > n_var
# CovMve: n_obs > 2*n_var

cov_est_method = c(
  "cov1Para", 
  "cov2Para", 
  "covCor", 
  "covDiag", 
  "covMarket",
  "gis", 
  "qis", 
  "lis",
  # "CovMve", 
  "CovMcd",
  "huge_glasso",
  # "equal_weights",
  # "oracle", 
  # "pca",
  "factor1",
  "factor3",
  "sample"
)

roll <- seq(1, k - training_period, rolling_period)

# ------------------------------------------------------------------------------
#                 SIMULATIONS
# ------------------------------------------------------------------------------
#########
# PRIAL #
#########

# N_seq <- c(3,4,5,8,10,16,20,25,32,40,50,80,100,160,200, 300, 500)
# p_seq <- N_seq %>% rev

N_seq <- seq(2,200, 10)
p_seq <- rev(N_seq)

Np <- data.frame(n_obs=N_seq, p_variables=p_seq) 
n_simulations <- 2

method <- cov_est_method
# method <- "huge_glasso"

tictoc::tic()
mc_sim <- lapply(1:n_simulations, function(sim){
  pmap(
    crossing(Np, method) %>% 
      filter(
        case_when(
          method %in% c("gis", "lis", "qis", "CovMcd") ~ n_obs > p_variables,
          method == "CovMve" ~ n_obs > 2*p_variables,
          method %in% c("factor1", "pca") ~ n_obs > 2 & p_variables > 5,
          method == "factor3" ~ n_obs > 3,
          TRUE ~ n_obs > 1)
      ),
    mc_simulation_cov,
    simulation = sim,
    criterion = "prial"
  ) %>% reduce(append)
})
tictoc::toc()

mean_test_primal <- lapply(1:length(mc_sim[[1]]), function(x){
  mc_sim %>% map_depth(1,x) %>% reduce(append) %>% mean
}) %>% reduce(append)

# winner: gis N > K, in general cov1para
prial_plot <- crossing(Np, method) %>% 
  filter(
    case_when(
      method %in% c("gis", "lis", "qis", "CovMcd") ~ n_obs > p_variables,
      method == "CovMve" ~ n_obs > 2*p_variables,
      method %in% c("factor1", "pca") ~ n_obs > 2 & p_variables > 5,
      method == "factor3" ~ n_obs > 3,
      TRUE ~ n_obs > 1)) %>% 
  mutate(primal = mean_test_primal,
         pn = p_variables/n_obs) %>% 
  ggplot(aes(x = pn, y = primal, color = method)) +
  # geom_smooth(se = F) +
  geom_line() +
  geom_vline(xintercept = 1, color = "red") +
  geom_hline(yintercept = 0, color ="red") +
  theme_hsg() +
  xlab("Nb. variables/ Nb. observations") + 
  ylab("Percentage Relative Improvement in Average Loss (%)") + 
  ggtitle("PRIMAL for estimators wrt. sample covariance") +
  ylim(c(-1,1)) +
  xlim(c(0,17))

plotly::ggplotly(prial_plot)

###########
# L2 Norm #
###########

n_obs <- seq(0,200, 40)
p_variables <- n_obs
method <- cov_est_method

l2_norm_cov <- lapply(1:10, function(sim){
  pmap(
    crossing(Np, method) %>% 
      filter(
        case_when(
          method %in% c("gis", "lis", "qis", "CovMcd") ~ n_obs > p_variables,
          method == "CovMve" ~ n_obs > 2*p_variables,
          method %in% c("factor1", "pca") ~ n_obs > 2 & p_variables > 5,
          method == "factor3" ~ n_obs > 3,
          TRUE ~ n_obs > 1)),
    mc_simulation_cov,
    criterion = "l2_norm",
    simulation = sim
  ) %>% reduce(append)
})

mean_l2 <- lapply(1:length(l2_norm_cov[[1]]), function(x){
  l2_norm_cov  %>% map_depth(1,x) %>% reduce(append) %>% mean
}) %>% reduce(append)

results_l2 <- crossing(Np, method) %>% 
  filter(
    case_when(
      method %in% c("gis", "lis", "qis", "CovMcd") ~ n_obs > p_variables,
      method == "CovMve" ~ n_obs > 2*p_variables,
      method %in% c("factor1", "pca") ~ n_obs > 2 & p_variables > 5,
      method == "factor3" ~ n_obs > 3,
      TRUE ~ n_obs > 1)) %>% 
  mutate(l2 = mean_l2)

colnames(results_l2) <- c("x","y","method", "z")

results_method <- lapply(method, function(met){
  results_l2 %>% filter(method == met) %>% mutate(z=z/y)
})
names(results_method) <- method

lapply(method, function(met){
  plot_ly(
    x = results_method[[met]]$x %>% unique,
    y = results_method[[met]]$y %>% unique,
    z = matrix(results_method[[met]]$z, ncol = 5),
    type = "contour"
  ) %>% 
    layout(title = met, 
           xaxis = list(title = "Nb. Observations"), 
           yaxis = list(title = "Nb. Variables")
    )
})

# ------------------------------------------------------------------------------
#                 HISTORICAL DATA - COMPUTE PORTFOLIOS
# ------------------------------------------------------------------------------

test_rolling_cov_method <- pmap(
  crossing(cov_est_method, roll),
  get_portfolio_metrics, 
  stock_returns = log_returns,
  portfolio_optimization = "minvar",
  short = TRUE, 
  factor_returns = factors
)

names(test_rolling_cov_method) <- rep(cov_est_method, each=50)

results_by_cov <- lapply(seq(1,50, 50), function(x) 
  test_rolling_cov_method[x:(x+49)])

names(results_by_cov) <- cov_est_method


all_avg_returns <- lapply(cov_est_method, function(cov) 
  results_by_cov[[cov]] %>% map_depth(1,1) %>% reduce(rbind) %>% 
    summarise(mean = mean(returns)*12*100)) %>% 
  unlist %>% 
  reduce(append)

all_avg_sd <- lapply(cov_est_method, function(cov) 
  results_by_cov[[cov]] %>% 
    map_depth(1,2) 