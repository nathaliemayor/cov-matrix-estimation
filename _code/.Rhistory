SR <- ((mean(period_returns$returns)-rf_sr)/ptf_sd)*
sqrt(freq)*
sqrt(multiplicator)
# results <- period_returns
results = list(period_returns, ptf_sd, SR, optimal_weights)
}
bootstrap_cov_estimates <- function(
roll,
n_bootstraps,
cov_est_method,
data = ff100_data$monthly,
frequency = "monthly"
) {
stock_returns <- bootstrapped_portfolios(data, n_bootstraps)
test_rolling_bootstrap <- pmap(
crossing(stock_returns, roll),
get_portfolio_metrics,
cov_est_method = cov_est_method,
portfolio_optimization = "tangent",
short = TRUE,
factor_returns = factors,
frequency = frequency
)
names(test_rolling_bootstrap) <- rep(
1:n_bootstraps,
each=length(roll)
)
results_by_bootstrap <- lapply(
seq(1,(n_bootstraps-1)*length(roll)+1, length(roll)),
function(x)
test_rolling_bootstrap[x:(x+length(roll)-1)]
)
names(results_by_bootstrap) <- 1:n_bootstraps
all_avg_returns_bootstrap <- lapply(1:n_bootstraps, function(x)
results_by_bootstrap[[x]] %>%
map_depth(1,1) %>%
reduce(rbind) %>%
filter(!is.na(returns)) %>%
dplyr::summarise(mean = mean(returns))
) %>%
unlist %>%
reduce(append)
all_avg_sd_bootstrap <- lapply(1:n_bootstraps, function(x)
results_by_bootstrap[[x]] %>%
map_depth(1,2) %>%
reduce(append) %>%
na.omit %>%
mean) %>%
reduce(append)
df <- data.frame(method = cov_est_method,
returns=all_avg_returns_bootstrap,
sd = all_avg_sd_bootstrap)
return(df)
}
test_daily <- pmap(
tibble(data = ff100_data, frequency = c("monthly", "daily")),
bootstrap_cov_estimates,
roll = roll,
n_bootstraps = 100,
cov_est_method = "sample"
)
data <- ff100_data$monthly
penalization_type <- "L1"
set.seed(123)  # Set seed for reproducibility
num_folds <- 10  # Number of folds for cross-validation
# Create indices for cross-validation
fold_indices <- sample(rep(1:num_folds, length.out = nrow(data)))
# Function to get data for a specific fold
get_fold_data <- function(fold_num) {
return(data[fold_indices == fold_num, ])
}
# Perform cross-validation for L1 and L2 penalization
cv_results <- lapply(c("L1", "L2"), function(penalty_type) {
lapply(1:num_folds, function(fold) {
# Get training data for the current fold
training_data <- data[fold_indices != fold, ]
# Get validation data for the current fold
validation_data <- get_fold_data(fold)
# Perform penalized covariance matrix estimation
CCCP(
training_data,
lambda = NULL,
type = penalty_type,
validation_data = validation_data
)$obj
})
})
# Perform cross-validation for L1 and L2 penalization
cv_results <- lapply(c("L1", "L2"), function(penalty_type) {
lapply(1:num_folds, function(fold) {
# Get training data for the current fold
training_data <- data[fold_indices != fold, ]
# Get validation data for the current fold
validation_data <- get_fold_data(fold)
# Perform penalized covariance matrix estimation
cccp(
training_data,
lambda = NULL,
type = penalty_type,
validation_data = validation_data
)$obj
})
})
cv_results <- lapply(c("L1", "L2"), function(penalty_type) {
lapply(1:num_folds, function(fold) {
# Get training data for the current fold
training_data <- data[fold_indices != fold, ]
# Get validation data for the current fold
validation_data <- get_fold_data(fold)
# Perform penalized covariance matrix estimation
result <- cccp(training_data, penalty = penalty_type)
# Obtain the objective value for the validation set
obj_value <- CCCP_objective(result, validation_data)
return(obj_value)
})
})
library(cvms)
library(cvms)
library(cvms)
library(quantmod)
library(corpcor)
library(covTest)
library(forestFloor)
library(nlme)
library(parallel)
library(qrmtools)
library(MASS)
install.packages("cvms")
install.packages("covTest")
install.packages("forestFloor")
install.packages("qrmtools")
library(cvms)
library(quantmod)
library(corpcor)
library(covTest)
library(forestFloor)
library(nlme)
library(parallel)
library(qrmtools)
library(MASS)
# ------------------------------------------------------------------------------
#                 PREAMBLE - LOAD PACKAGES AND USER DEFINED FUNCTIONS
# ------------------------------------------------------------------------------
# install and load local libraries
local_libs <- list.files("lib", full.names = T)
lapply(local_libs[1], install.packages, repos=NULL, type="source")
library(cvms)
library(quantmod)
library(corpcor)
library(covTest)
local_libs <- list.files("lib", full.names = T)
lapply(local_libs[1], install.packages, repos=NULL, type="source")
# general
library(plyr)
library(tidyverse)
library(xts)
library(zoo)
library(lubridate)
library(conflicted)
# plotting
library(ggalt)
library(extrafont)
library(plotly)
# covariance specific
library(cccp)
library(huge)           # glasso, RIC
library(cvCovEst)
library(rrcov)          # CovMcd and CovMve
library(tawny)
library(tawny.types)
library(covmat)
library(corpcor)
library(CovTools)       # Oracle
library(covFactorModel) # factor models
# finance specific
library(tidyquant)
library(quantmod)
# math/ stats tools
library(quadprog)
library(MASS)
library(StatPerMeCo)
# remotes::install_github("MatthewBJane/theme_park")
library(ThemePark)
library(ggrepel)
# reslove confilcts
conflict_prefer("filter", "dplyr")
conflict_prefer("select", "dplyr")
conflict_prefer("rename", "dplyr")
conflicts_prefer(stats::lag)
conflict_prefer("first", "dplyr")
conflicts_prefer(dplyr::last)
conflicts_prefer(plyr::mutate)
# load own functions
# load Ledoit-Wolf functions
lapply(
c(
list.files("functions", full.names = TRUE),
list.files("covShrinkage-main", pattern = ".R", full.names = T)
),
source
) %>% invisible
library(cvms)
library(quantmod)
library(corpcor)
library(covTest)
library(forestFloor)
library(nlme)
library(parallel)
library(qrmtools)
library(MASS)
penalized_portfolio <- function(returns, lambda, penalty = "L2") {
# Compute the sample covariance matrix
S <- cov(returns)
# Apply L1 or L2 penalty
if (penalty == "L1") {
cov_matrix <- cvms::cvms(S, alpha = 1, lambda = lambda)
} else if (penalty == "L2") {
cov_matrix <- cvms::cvms(S, alpha = 0, lambda = lambda)
} else {
stop("Invalid penalty type. Choose 'L1' or 'L2'.")
}
return(cov_matrix)
}
rio::import(file.choose())
sp_info <- rio::import(file.choose())
sp_info <- rio::import(file.choose()) %>%
filter(date = "2023-12-01")
library(magrittr)
library(tidyverse)
sp_info <- rio::import(file.choose()) %>%
filter(date = "2023-12-01")
sp_info %>%
filter(date = "2023-12-01")
sp_info %>%
filter(date == "2023-12-01")
sp_info %>%
filter(date == "2023-12-02")
sp_info %>%
filter(date == "2023-12-03")
sp_info
sp_info %>% last()
sp_info <- rio::import(file.choose())
sp_info <- rio::import(file.choose())$Symbol
sp_info <- rio::import(file.choose())$Symbol
quantmod::getSymbols(sp_info, from = "2000-01-01")
stock_data <- quantmod::getSymbols(sp_info, from = "1980-01-01")
stock_data
sp_info <- rio::import(file.choose())$Symbol
stock_data <- tq_get(sp_info,
from = "1980-01-01",
get = "stock.prices")
stock_data <- tidyquant::tq_get(sp_info,
from = "1980-01-01",
get = "stock.prices")
stock_data %>% select(date, symbol, adjusted) %>% pivot_wider(names_from = symbol, values_from = adjusted)
stock_data %>% select(date, symbol, adjusted) %>%
pivot_wider(names_from = symbol, values_from = adjusted) %>%
filter(date > "1990-01-01")
stock_data %>% select(date, symbol, adjusted) %>%
pivot_wider(names_from = symbol, values_from = adjusted) %>%
filter(date > "2000-01-01")
clean_stocks <- stock_data %>% select(date, symbol, adjusted) %>%
pivot_wider(names_from = symbol, values_from = adjusted) %>%
filter(date > "2000-01-01")
which(is.na(clean_stocks))
colSums(is.na(clean_stocks))
colSums(is.na(clean_stocks)) > 0
na_col <- colSums(is.na(clean_stocks)) > 0
clean_stocks <- stock_data %>% select(date, symbol, adjusted) %>%
pivot_wider(names_from = symbol, values_from = adjusted) %>%
filter(date > "2000-01-01") %>%
select(na_col )
colSums(is.na(clean_stocks)) > 0
na_col <- colnames(clean_stocks)[colSums(is.na(clean_stocks)) > 0]
na_col
stock_data %>% select(date, symbol, adjusted) %>%
pivot_wider(names_from = symbol, values_from = adjusted) %>%
filter(date > "2000-01-01") %>%
select(na_col)
clean_stocks
clean_stocks <- stock_data %>% select(date, symbol, adjusted) %>%
pivot_wider(names_from = symbol, values_from = adjusted) %>%
filter(date > "2000-01-01") %>%
select(-na_col)
clean_stocks
clean_stocks <- stock_data %>% select(date, symbol, adjusted) %>%
pivot_wider(names_from = symbol, values_from = adjusted) %>%
filter(date > "1980-01-01") %>%
select(-na_col)
na_col <- colnames(clean_stocks)[colSums(is.na(clean_stocks)) > 0]
stock_data %>% select(date, symbol, adjusted) %>%
pivot_wider(names_from = symbol, values_from = adjusted) %>%
filter(date > "1980-01-01") %>%
select(-na_col)
clean_stocks <- stock_data %>% select(date, symbol, adjusted) %>%
pivot_wider(names_from = symbol, values_from = adjusted) %>%
filter(date > "1980-01-01") %>%
select(-na_col)
na_col <- colnames(clean_stocks)[colSums(is.na(clean_stocks)) > 0]
clean_stocks <- stock_data %>% select(date, symbol, adjusted) %>%
pivot_wider(names_from = symbol, values_from = adjusted) %>%
filter(date > "1980-01-01") %>%
select(-na_col)
clean_stocks
clean_stocks <- stock_data %>% select(date, symbol, adjusted) %>%
pivot_wider(names_from = symbol, values_from = adjusted) %>%
filter(date > "1980-01-01")
na_col <- colnames(clean_stocks)[colSums(is.na(clean_stocks)) > 0]
clean_stocks <- stock_data %>% select(date, symbol, adjusted) %>%
pivot_wider(names_from = symbol, values_from = adjusted) %>%
filter(date > "1980-01-01") %>%
select(-na_col)
clean_stocks <- stock_data %>% select(date, symbol, adjusted) %>%
pivot_wider(names_from = symbol, values_from = adjusted) %>%
filter(date > "1985-01-01")
na_col <- colnames(clean_stocks)[colSums(is.na(clean_stocks)) > 0]
no_na <- clean_stocks %>% select(-na_col)
clean_stocks <- stock_data %>% select(date, symbol, adjusted) %>%
pivot_wider(names_from = symbol, values_from = adjusted) %>%
filter(date > "1987-01-01")
na_col <- colnames(clean_stocks)[colSums(is.na(clean_stocks)) > 0]
no_na <- clean_stocks %>% select(-na_col)
clean_stocks <- stock_data %>% select(date, symbol, adjusted) %>%
pivot_wider(names_from = symbol, values_from = adjusted) %>%
filter(date > "1989-01-01")
na_col <- colnames(clean_stocks)[colSums(is.na(clean_stocks)) > 0]
no_na <- clean_stocks %>% select(-na_col)
clean_stocks <- stock_data %>% select(date, symbol, adjusted) %>%
pivot_wider(names_from = symbol, values_from = adjusted) %>%
filter(date > "1990-01-01")
na_col <- colnames(clean_stocks)[colSums(is.na(clean_stocks)) > 0]
no_na <- clean_stocks %>% select(-na_col)
clean_stocks <- stock_data %>% select(date, symbol, adjusted) %>%
pivot_wider(names_from = symbol, values_from = adjusted) %>%
filter(date > "1993-01-01")
na_col <- colnames(clean_stocks)[colSums(is.na(clean_stocks)) > 0]
no_na <- clean_stocks %>% select(-na_col)
clean_stocks <- stock_data %>% select(date, symbol, adjusted) %>%
pivot_wider(names_from = symbol, values_from = adjusted) %>%
filter(date > "1994-01-01")
na_col <- colnames(clean_stocks)[colSums(is.na(clean_stocks)) > 0]
no_na <- clean_stocks %>% select(-na_col)
no_na
no_na %>% last(
)
no_na %>% last()
stock_data %>%
group_by(month = floor_date(date, "month")) %>%
summarize(adj_close = last(adjusted))
library(tidyquant)
library(dplyr)
library(lubridate)
stock_data %>%
group_by(month = floor_date(date, "month")) %>%
summarize(adj_close = last(adjusted))
monthly_adj <- stock_data %>%
group_by(month = floor_date(date, "month")) %>%
summarize(date = date, symbol = symbol, adj_close = last(adjusted))
monthly_adj
monthly_adj <- stock_data %>%
group_by(month = floor_date(date, "month")) %>%
summarize(symbol = symbol, adj_close = last(adjusted))
monthly_adj <- stock_data %>%
group_by(month = floor_date(date, "month"), symbol) %>%
summarize(adj_close = last(adjusted))
monthly_adj
monthly_adj <- stock_data %>%
group_by(month = floor_date(date, "month"), symbol) %>%
summarize(adj_close = last(adjusted)) %>%
pivot_wider(names_from = symbol, values_from = adjusted) %>%
filter(date > "1994-01-01")
monthly_adj <- stock_data %>%
group_by(month = floor_date(date, "month"), symbol) %>%
summarize(adj_close = last(adjusted)) %>%
pivot_wider(names_from = symbol, values_from = adj_close) %>%
filter(date > "1994-01-01")
monthly_adj <- stock_data %>%
group_by(month = floor_date(date, "month"), symbol) %>%
summarize(adj_close = last(adjusted)) %>%
pivot_wider(names_from = symbol, values_from = adj_close) %>%
filter(month > "1994-01-01")
monthly_adj <- stock_data %>%
group_by(month = floor_date(date, "month"), symbol) %>%
summarize(adj_close = last(adjusted)) %>%
pivot_wider(names_from = symbol, values_from = adj_close) %>%
filter(month > "1994-01-01") %>%
select(-na_col)
no_na_daily <- clean_stocks %>% select(-na_col)
monthly_adj <- stock_data %>%
group_by(month = floor_date(date, "month"), symbol) %>%
summarize(adj_close = last(adjusted)) %>%
pivot_wider(names_from = symbol, values_from = adj_close) %>%
filter(month > "1994-01-01") %>%
select(-na_col)
daily_sp500_prices <- no_na_daily
monthly_sp500_prices <- monthly_adj
daily_sp500_prices <- no_na_daily
sp500_stock_data <- list(monthly = monthly_sp500_prices,
daily = daily_sp500_prices)
save(
sp500_stock_data,
"/Users/pro/Library/Mobile Documents/com~apple~CloudDocs/masters_thesis/data/sp500_stock_data.RData"
)
save(
sp500_stock_data,
file="/Users/pro/Library/Mobile Documents/com~apple~CloudDocs/masters_thesis/data/sp500_stock_data.RData"
)
# ------------------------------------------------------------------------------
#                 MAIN - MASTER'S THESIS COCKPIT
# ------------------------------------------------------------------------------
# execute preamble with packages, own functions and package preferences
source("preamble.R")
# define paths
core_path <- "/Users/pro/Library/Mobile Documents/com~apple~CloudDocs"
data_path <- "masters_thesis/data"
from_date <- as.Date("1970-01-01")
to_date <- as.Date("2019-12-01")
# ------------------------------------------------------------------------------
#                 LOAD DATA
# ------------------------------------------------------------------------------
# load Fama-French data
data_files_names <- c(
"100_Portfolios_10x10_Wout_Div.CSV",
"100_Portfolios_10x10_Daily.CSV"
)
ff100_data <- lapply(
data_files_names,
get_data,
path = file.path(core_path,data_path)
)
names(ff100_data) <- c("monthly", "daily")
# get 10-year Treasury notes and S&P500 data monthly and daily
tickers <- c("^TNX","^GSPC")
getSymbols(
tickers,
from = from_date,
to = to_date,
periodicity = "daily"
)
gspc_monthly <- GSPC$GSPC.Adjusted %>%
apply.monthly(mean) %>%
fortify.zoo %>%
mutate(returns = GSPC.Adjusted/lag(GSPC.Adjusted)-1)
# Load historical factor data (market, SMB, HML)
# downloaded directly from
# https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html
# Fama/French 3 Factors, CSV
factors <- rio::import(
file.path(core_path,data_path, "F-F_Research_Data_Factors.CSV")
) %>%
mutate(V1 = as.Date(
V1 %>% paste0("01"),
format = "%Y%m%d"
)
) %>%
dplyr::filter(V1 > from_date & V1 < to_date) %>%
dplyr::select(-RF) %>%
rename(date = V1)
factors_daily <- rio::import(
file.path(core_path,data_path, "F-F_Research_Data_Factors_daily.CSV")
) %>%
mutate(date = as.Date(date,
format = "%Y%m%d")) %>%
dplyr::filter(date > from_date & date < to_date) %>%
dplyr::select(-RF)
# ------------------------------------------------------------------------------
#                 DEFINE PARAMETERS, SETTINGS
# ------------------------------------------------------------------------------
training_period <- 12  # months
rolling_period <- 6         # months
n <- dim(ff100_data$monthly)[2]
k <- dim(ff100_data$monthly)[1]
frequency <- "daily" # "monthly"
if(frequency == "daily"){
assets_returns <- ff100_data$daily
factors_returns <- factors_daily
}else if(frequency == "monthly"){
assets_returns <- ff100_data$monthly
factors_returns <- factors
}
cov_est_method = c(
"cov1Para",
"cov2Para",
"covCor",
"CCM",
"covDiag",
"covMarket",
"gis",
"qis",
"lis",
# "CovMve",
"CovMcd",
# "huge_glasso",
"equal_weights",
# "factor1",
# "factor3"
"RMT",
"sample"
)
roll <- seq(1, k - training_period, rolling_period)
cov_est_method <- "sample"
# ------------------------------------------------------------------------------
#                 BOOTSTRAPPED PORTFOLIO DATA
# ------------------------------------------------------------------------------
n_bootstraps <- 1000
df_all <- lapply(cov_est_method,
bootstrap_cov_estimates,
roll=roll,
n_bootstraps=n_bootstraps,
data = ff100_data$daily,
frequency = frequency) %>%
reduce(rbind)
